substitutions:
  device_name: lsc-powersstrip-001
  friendly_name: LSC Powersstrip 001
  voltage_divider: '744'
  current_resistor: '0.001'
  current_multiply: '0.744'

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

  # <-- on_boot DOIT Ãªtre ici -->
  on_boot:
    priority: -100
    then:
      - switch.turn_off: relay_A
      - switch.turn_off: relay_B
      - switch.turn_off: relay_C

bk72xx:
  board: cbu

logger:
  baud_rate: 0

web_server:
  port: 80

captive_portal:
mdns:

api:
  encryption:
    key: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx//////your API KEY\\\\\\\\\\\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" #juste copy past your key from the new empty device

ota:
  - platform: esphome
    password: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx//////your OTAI KEY\\\\\\\\\\\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" #juste copy past your key from the new empty device

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Lsc-Powersstrip-001"
    password: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx//////your WFI KEY\\\\\\\\\\\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" #juste copy past your key from the new empty device

globals:
  - id: wifi_blinking
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: click_count
    type: int
    restore_value: no
    initial_value: '0'

interval:
  - interval: 1s
    then:
      - if:
          condition: wifi.connected
          then:
            - lambda: 'id(wifi_blinking) = false;'
            - light.turn_on: led_wifi
          else:
            - if:
                condition:
                  lambda: 'return !id(wifi_blinking);'
                then:
                  - lambda: 'id(wifi_blinking) = true;'
                  - script.execute: wifi_blink

switch:
  - platform: gpio
    pin: GPIO7
    id: relay_A
    name: "${friendly_name} A"
    inverted: false
    restore_mode: ALWAYS_OFF
    on_turn_on:  { light.turn_on: led_r1 }
    on_turn_off: { light.turn_off: led_r1 }

  - platform: gpio
    pin: GPIO6
    id: relay_B
    name: "${friendly_name} B"
    inverted: false
    restore_mode: ALWAYS_OFF
    on_turn_on:  { light.turn_on: led_r2 }
    on_turn_off: { light.turn_off: led_r2 }

  - platform: gpio
    pin: GPIO24
    id: relay_C
    name: "${friendly_name} C"
    inverted: false
    restore_mode: ALWAYS_OFF
    on_turn_on:  { light.turn_on: led_r3 }
    on_turn_off: { light.turn_off: led_r3 }

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO15
      inverted: true
      mode: INPUT_PULLUP
    name: "${friendly_name} Button"
    id: knop15
    filters:
      - delayed_on: 20ms
    on_press:
      then:
        - script.execute: click_accumulate

output:
  - platform: gpio
    pin: GPIO16
    id: led_wifi_out
    inverted: true

  - platform: gpio
    pin: GPIO26
    id: led_r1_out
    inverted: true

  - platform: gpio
    pin: GPIO8
    id: led_r2_out
    inverted: true

  - platform: gpio
    pin: GPIO22
    id: led_r3_out
    inverted: true

light:
  - platform: binary
    name: "${friendly_name} LED WiFi"
    id: led_wifi
    output: led_wifi_out
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: binary
    name: "${friendly_name} LED R1"
    id: led_r1
    output: led_r1_out
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: binary
    name: "${friendly_name} LED R2"
    id: led_r2
    output: led_r2_out
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: binary
    name: "${friendly_name} LED R3"
    id: led_r3
    output: led_r3_out
    restore_mode: ALWAYS_OFF
    internal: true

sensor:
  - platform: hlw8012
    model: BL0937
    update_interval: 500ms
    change_mode_every: 2

    cf_pin:  { number: GPIO14, inverted: true }
    cf1_pin: { number: GPIO9,  inverted: true }
    sel_pin: { number: GPIO17, inverted: true }

    voltage:
      name: "${friendly_name} Voltage"
      id: strip_voltage
      on_value: { component.update: apparent_power }
      filters:
        - sliding_window_moving_average: { window_size: 4, send_every: 2 }

    current:
      name: "${friendly_name} Current"
      id: strip_current
      accuracy_decimals: 3
      on_value: { component.update: apparent_power }
      filters:
        - multiply: ${current_multiply}
        - sliding_window_moving_average: { window_size: 4, send_every: 2 }

    power:
      name: "${friendly_name} Power"
      id: strip_power
      on_value: { component.update: power_factor }
      filters:
        - sliding_window_moving_average: { window_size: 4, send_every: 2 }

    energy:
      name: "${friendly_name} Energy"

    voltage_divider: ${voltage_divider}
    current_resistor: ${current_resistor}

  - platform: template
    name: "${friendly_name} Apparent power"
    id: apparent_power
    unit_of_measurement: VA
    device_class: apparent_power
    lambda: |-
      return id(strip_voltage).state * id(strip_current).state;
    update_interval: never
    on_value: { component.update: power_factor }

  - platform: template
    name: "${friendly_name} Power factor"
    id: power_factor
    unit_of_measurement: ''
    device_class: power_factor
    lambda: |-
      if (id(apparent_power).state <= 0.0) return 0.0;
      return id(strip_power).state / id(apparent_power).state;
    filters:
      - clamp: { min_value: 0, max_value: 1 }
    update_interval: never

  - platform: uptime
    name: "${friendly_name} Uptime"

  - platform: wifi_signal
    name: "${friendly_name} RSSI"
    update_interval: 30s

text_sensor:
  - platform: libretiny
    version:
      name: "${friendly_name} LibreTiny Version"

script:
  - id: wifi_blink
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(wifi_blinking);'
          then:
            - light.toggle: led_wifi
            - delay: 500ms

  - id: click_accumulate
    mode: restart
    then:
      - lambda: 'id(click_count)++;'
      - if:
          condition:
            lambda: 'return id(click_count) == 1;'
          then:
            - script.execute: click_timer
          else:
            - lambda: 'id(click_count) = 0;'
            - script.execute: all_off

  - id: click_timer
    mode: restart
    then:
      - delay: 350ms
      - if:
          condition:
            lambda: 'return id(click_count) == 1;'
          then:
            - lambda: 'id(click_count) = 0;'
            - script.execute: all_on

  - id: all_on
    then:
      - switch.turn_on: relay_A
      - switch.turn_on: relay_B
      - switch.turn_on: relay_C

  - id: all_off
    then:
      - switch.turn_off: relay_A
      - switch.turn_off: relay_B
      - switch.turn_off: relay_C
